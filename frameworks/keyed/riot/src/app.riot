<app>
  <div class='container'>
    <div class='jumbotron'>
      <div class='row'>
        <div class='col-md-6'>
          <h1>riot</h1>
        </div>
        <div class='col-md-6'>
          <div class='row'>
            <div class='col-sm-6 smallpad'>
              <button type='button' class='btn btn-primary btn-block' id='run' onclick={ run }>
                Create 1,000 rows
              </button>
            </div>
            <div class='col-sm-6 smallpad'>
              <button type='button' class='btn btn-primary btn-block' id='runlots' onclick={ runLots }>Create 10,000 rows
              </button>
            </div>
            <div class='col-sm-6 smallpad'>
              <button type='button' class='btn btn-primary btn-block' id='add' onclick={ add }>
                Append 1,000 rows
              </button>
            </div>
            <div class='col-sm-6 smallpad'>
              <button type='button' class='btn btn-primary btn-block' id='update' onclick={ updateRows }>Update every 10th row
              </button>
            </div>
            <div class='col-sm-6 smallpad'>
              <button type='button' class='btn btn-primary btn-block' id='clear' onclick={ clear }>
                Clear
              </button>
            </div>
            <div class='col-sm-6 smallpad'>
              <button type='button' class='btn btn-primary btn-block' id="swaprows" onclick={ swapRows } >
                Swap Rows
              </button>
            </div>
          </div>
        </div>
      </div>
    </div>
    <table class='table table-hover table-striped test-data'>
      <tbody>
        <tr
          is='row'
          each={row in state.rows}
          key={row.id}
          {...{
            row,
            remove,
            select,
            class: rowClass(row)
          }}
          >
        </tr>
      </tbody>
    </table>
    <span class='preloadicon glyphicon glyphicon-remove' aria-hidden='true'></span>
  </div>
  <script>
    import Row from './row.riot'
    export default {
      components: {
        Row
      },
      onBeforeMount(props) {
        this.store = props.store
        this.state = {
          rows: this.store.data,
          selected: this.store.selected
        }
      },
      rowClass(row) {
        return row.id === this.state.selected ? 'danger' : ''
      },
      renderWithNewState() {
        this.update({
          rows: this.store.data,
          selected: this.store.selected
        })
      },
      add() {
        startMeasure('add')
        this.store.add()
        this.renderWithNewState()
        stopMeasure()
      },
      remove(item) {
        return () => {
          startMeasure('remove')
          this.store.delete(item.id)
          this.renderWithNewState()
          stopMeasure()
        }
      },
      select(item) {
        return () => {
          startMeasure('select')
          this.store.select(item.id)
          this.renderWithNewState()
          stopMeasure()
        }
      },
      run() {
        startMeasure('run')
        this.store.run()
        this.renderWithNewState()
        stopMeasure()
      },
      updateRows() {
        startMeasure('update')
        this.store.update()
        this.renderWithNewState()
        stopMeasure()
      },
      runLots() {
        startMeasure('runLots')
        this.store.runLots()
        this.renderWithNewState()
        stopMeasure()
      },
      clear() {
        startMeasure('clear')
        this.store.clear()
        this.renderWithNewState()
        stopMeasure()
      },
      swapRows() {
        startMeasure('swapRows')
        this.store.swapRows()
        this.renderWithNewState()
        stopMeasure()
      }
    }
  </script>
</app>